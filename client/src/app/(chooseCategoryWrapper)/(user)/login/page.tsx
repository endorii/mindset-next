"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/lib/hooks/useAuth";
import { ILoginCredentials, CreateUserDto } from "@/types/auth/auth.types";
import { useCurrentUser } from "@/lib/hooks/useUsers";
import InputField from "@/components/AdminPage/components/InputField";

const Login = () => {
    const router = useRouter();
    const { login, register, isLoading, error } = useAuth();
    const {
        data: currentUser,
        isLoading: isUserLoading,
        isError: isUserError,
    } = useCurrentUser();

    const [loginEmail, setLoginEmail] = useState<string>("");
    const [loginPassword, setLoginPassword] = useState<string>("");
    const [localLoginMessage, setLocalLoginMessage] = useState<string | null>(
        null
    );

    const [registerUsername, setRegisterUsername] = useState<string>("");
    const [registerEmail, setRegisterEmail] = useState<string>("");
    const [registerPassword, setRegisterPassword] = useState<string>("");
    const [registerPhone, setRegisterPhone] = useState<string>("");
    const [registerRulesCheckBox, setRegisterRulesCheckBox] =
        useState<boolean>(false);
    const [registerComerceCheckBox, setRegisterComerceCheckBox] =
        useState<boolean>(false);
    const [registerMessage, setRegisterMessage] = useState<string | null>(null);
    const [registerIsSuccess, setRegisterIsSuccess] = useState<boolean>(false);

    const loginData: ILoginCredentials = {
        email: loginEmail,
        password: loginPassword,
    };

    const registerData: CreateUserDto = {
        name: registerUsername,
        email: registerEmail,
        phone: registerPhone,
        password: registerPassword,
    };

    const handleLoginSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setLocalLoginMessage(null);

        try {
            login(loginData);
            setLocalLoginMessage("–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥!");
            router.push("/");
        } catch (err) {
            setLocalLoginMessage(error?.message || "–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É");
        }
    };

    const handleRegisterSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setRegisterMessage(null);
        setRegisterIsSuccess(false);

        if (registerPassword.length < 8) {
            setRegisterMessage("–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤.");
            return;
        }
        if (!registerRulesCheckBox) {
            setRegisterMessage("–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—è –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω—É.");
            return;
        }

        try {
            register(registerData);
            setRegisterMessage("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!");
            setRegisterIsSuccess(true);
        } catch (err) {
            setRegisterMessage(error?.message || "–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó");
        }
    };

    useEffect(() => {
        if (isUserLoading) {
            return;
        }

        if (currentUser) {
            router.push("/");
        }
    }, [currentUser, isUserLoading, isUserError, router]);

    return (
        <div className="flex flex-col md:flex-row justify-between gap-[30px] pt-[60px] p-[10px] text-white">
            <div className="flex flex-col gap-[15px] justify-between w-full md:w-1/3 rounded-xl bg-white/5 shadow-lg backdrop-blur-3xl border border-white/5 p-[20px] transition hover:shadow-xl hover:border-white/10">
                <div className="flex flex-col gap-[15px]">
                    <h3 className="text-4xl font-thin text-white">
                        –ó–∞—Ö–∏—Å—Ç –≤–∞—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
                    </h3>
                    <hr className="border-t border-white/10" />

                    <p className="text-white/80 text-sm">
                        –ú–∏ —Å–µ—Ä–π–æ–∑–Ω–æ —Å—Ç–∞–≤–∏–º–æ—Å—å –¥–æ –±–µ–∑–ø–µ–∫–∏ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö
                        –¥–∞–Ω–∏—Ö —ñ –Ω–µ –ø–µ—Ä–µ–¥–∞—î–º–æ —ó—Ö —Ç—Ä–µ—Ç—ñ–º –æ—Å–æ–±–∞–º. –í–∞—à–µ –ø—Ä–∞–≤–æ –Ω–∞
                        –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å –¥–ª—è –Ω–∞—Å ‚Äî –ø–æ–Ω–∞–¥ —É—Å–µ.
                    </p>

                    <p className="text-white/60 text-sm">
                        –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å—É—á–∞—Å–Ω—ñ –º–µ—Ç–æ–¥–∏ –∑–∞—Ö–∏—Å—Ç—É
                        —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –≤–∫–ª—é—á–Ω–æ –∑ –±–∞–≥–∞—Ç–æ—Ä—ñ–≤–Ω–µ–≤–æ—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é,
                        —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è–º —Ç–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º –∞—É–¥–∏—Ç–æ–º –±–µ–∑–ø–µ–∫–∏.
                    </p>

                    <ul className="flex flex-col gap-[7px] text-sm list-disc list-inside text-white/50">
                        <li>–í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –±–µ–∑–ø–µ—á–Ω–æ</li>
                        <li>–ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞—Ö–∏—â–µ–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è (SSL)</li>
                        <li>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —Ç—Ä–µ—Ç—ñ–º –æ—Å–æ–±–∞–º</li>
                        <li>–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å ‚Äî –Ω–∞—à –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç</li>
                        <li>–†–µ–≥—É–ª—è—Ä–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ—Ç–∏–∫–∏ –±–µ–∑–ø–µ–∫–∏</li>
                    </ul>

                    <div className="flex flex-wrap gap-2 mt-2 text-xs text-green-300">
                        <span className="bg-green-800/30 px-2 py-1 rounded-md">
                            SSL Secure
                        </span>
                        <span className="bg-green-800/30 px-2 py-1 rounded-md">
                            GDPR Ready
                        </span>
                        <span className="bg-green-800/30 px-2 py-1 rounded-md">
                            ISO/IEC 27001
                        </span>
                    </div>

                    <p className="text-xs text-white/40 mt-1">
                        üîí –ü–æ–Ω–∞–¥ 100 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∂–µ –¥–æ–≤—ñ—Ä–∏–ª–∏ –Ω–∞–º —Å–≤–æ—ó –¥–∞–Ω—ñ.
                    </p>
                </div>

                <div className="flex flex-col gap-[15px]">
                    <p className="text-sm text-white/60">
                        –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ç–æ–≥–æ, —è–∫ –º–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
                        —á–∏ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∞—à—ñ –¥–∞–Ω—ñ ‚Äî –∑–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–æ—é —Å–ª—É–∂–±–æ—é
                        –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —ñ –º–∏ –∑ —Ä–∞–¥—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ–º–æ.
                    </p>

                    <div className="flex flex-col gap-[5px]">
                        <a
                            href="/privacy-policy"
                            className="text-xs underline text-blue-400 hover:text-blue-300 w-fit"
                        >
                            –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ
                        </a>
                        <p className="text-xs text-white/30">
                            –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: —á–µ—Ä–≤–µ–Ω—å 2025
                        </p>
                    </div>
                </div>
            </div>

            <div className="flex flex-col gap-[15px] w-full md:w-1/3 rounded-xl bg-white/5 shadow-lg backdrop-blur-3xl border border-white/5 p-[20px]">
                <h3 className="text-4xl font-thin">–í—Ö—ñ–¥</h3>
                <hr className="border-t border-white/10" />
                <form
                    className="flex flex-col gap-[20px] rounded-md shadow-sm"
                    onSubmit={handleLoginSubmit}
                >
                    <InputField
                        label="–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞*"
                        value={loginEmail}
                        onChangeValue={(e) => {
                            setLoginEmail(e.target.value);
                            setLocalLoginMessage(null);
                        }}
                        type="email"
                        id={"loginEmail"}
                        name={"loginEmail"}
                    />
                    <InputField
                        label="–ø–∞—Ä–æ–ª—å*"
                        value={loginPassword}
                        onChangeValue={(e) => {
                            setLoginPassword(e.target.value);
                            setLocalLoginMessage(null);
                        }}
                        type="password"
                        id={"loginPassword"}
                        name={"loginPassword"}
                        placeholder={""}
                    />

                    {localLoginMessage && (
                        <p className="text-red-500 text-sm">
                            {localLoginMessage}
                        </p>
                    )}

                    <div className="underline cursor-pointer">
                        –ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å?
                    </div>

                    <button
                        type="submit"
                        className="text-white bg-transparent px-[15px] py-[15px] rounded-xl font-bold border border-white/15 hover:border-white/60 hover:bg-black/40 cursor-pointer disabled:cursor-not-allowed transition-all duration-200 disabled:text-gray-500 disabled:border-white/10 disabled:bg-white/0"
                        disabled={!loginEmail || !loginPassword || isLoading}
                    >
                        {isLoading ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "–£–≤—ñ–π—Ç–∏"}
                    </button>
                </form>
            </div>

            <div className="flex flex-col gap-[15px] w-full md:w-1/3 rounded-xl bg-white/5 shadow-lg backdrop-blur-3xl p-[20px]">
                <h3 className="text-4xl font-thin">–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h3>
                <hr className="border-t border-white/10" />
                <form
                    className=" flex flex-col gap-[20px] rounded-md shadow-sm"
                    onSubmit={handleRegisterSubmit}
                >
                    <InputField
                        label="—ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*"
                        value={registerUsername}
                        onChangeValue={(e) => {
                            setRegisterUsername(e.target.value);
                            setRegisterMessage(null);
                        }}
                        type="text"
                        id={"registerName"}
                        name={"registerName"}
                    />
                    <InputField
                        label="–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞*"
                        value={registerEmail}
                        onChangeValue={(e) => {
                            setRegisterEmail(e.target.value);
                            setRegisterMessage(null);
                        }}
                        type="email"
                        id={"registerEmail"}
                        name={"registerEmail"}
                    />
                    <InputField
                        label="—Ç–µ–ª–µ—Ñ–æ–Ω"
                        value={registerPhone}
                        onChangeValue={(e) => {
                            setRegisterPhone(e.target.value);
                            setRegisterMessage(null);
                        }}
                        type="tel"
                        id={"registerPhone"}
                        name={"registerPhone"}
                    />

                    <InputField
                        label="–ø–∞—Ä–æ–ª—å*"
                        value={registerPassword}
                        onChangeValue={(e) => {
                            setRegisterPassword(e.target.value);
                            setRegisterMessage(null);
                        }}
                        type="password"
                        id={"registerPass"}
                        name={"registerPass"}
                    />

                    <div className="text-sm flex flex-col gap-[7px] ">
                        <div className="flex gap-[10px] items-center">
                            <input
                                type="checkbox"
                                checked={registerRulesCheckBox}
                                onChange={() =>
                                    setRegisterRulesCheckBox(
                                        !registerRulesCheckBox
                                    )
                                }
                            />
                            <div className="text-sm text-white/60">
                                –Ø –ø–æ–≥–æ–¥–∂—É—é—Å—å –∑{" "}
                                <span className="text-blue-400 hover:text-blue-300 underline">
                                    –ø—Ä–∞–≤–∏–ª–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω—É
                                </span>
                            </div>
                        </div>
                        <div className="flex gap-[10px] items-center">
                            <input
                                type="checkbox"
                                checked={registerComerceCheckBox}
                                onChange={() =>
                                    setRegisterComerceCheckBox(
                                        !registerComerceCheckBox
                                    )
                                }
                            />
                            <div className="text-sm text-white/60">
                                –ó–≥—ñ–¥–Ω–∏–π –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –≤—ñ–¥{" "}
                                <span className="text-blue-400 hover:text-blue-300 underline">
                                    mindset.ua
                                </span>{" "}
                                –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π email
                            </div>
                        </div>
                    </div>

                    {registerMessage && (
                        <p
                            className={
                                registerIsSuccess
                                    ? "text-green-500 text-sm"
                                    : "text-red-500 text-sm"
                            }
                        >
                            {registerMessage}
                        </p>
                    )}

                    <button
                        className="text-white bg-transparent px-[15px] py-[15px] rounded-xl font-bold border border-white/15 hover:border-white/60 hover:bg-black/40 cursor-pointer disabled:cursor-not-allowed transition-all duration-200 disabled:text-gray-500 disabled:border-white/10 disabled:bg-white/0"
                        type="submit"
                        disabled={
                            !registerUsername ||
                            !registerEmail ||
                            !registerPassword ||
                            !registerRulesCheckBox ||
                            isLoading
                        }
                    >
                        {isLoading ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"}
                    </button>
                </form>
            </div>
        </div>
    );
};

export default Login;
